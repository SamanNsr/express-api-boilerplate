# This file includes a collection of standard swagger api defenition.
# Use this file as a pattern of best practices for API documentation.

swagger: "2.0"
info:
  description: "This is a sample server userService server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).      For this sample, you can use the api key `special-key` to test the authorization     filters."
  version: "1.0.0"
  title: "Swagger userService"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "apiteam@swagger.io"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "userService.swagger.io"
basePath: "/v1"
tags:
  - name: "user"
    description: "Everything about user"
    externalDocs:
      description: "Find out more"
      url: "http://swagger.io"
schemes:
  - "https"
  - "http"
paths:
  /user:
    post:
      tags:
        - "user"
      summary: "Add a new user"
      description: ""
      operationId: "addUser"
      consumes:
        - "application/json"
        - "application/xml"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "User object that needs to be added to the db"
          required: true
          schema:
            $ref: "#/components/schemas/User"
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "405":
          description: "Invalid input"
      security:
        - userService_auth:
            - "write:users"
            - "read:users"
    put:
      tags:
        - "user"
      summary: "Update an existing user"
      description: ""
      operationId: "updateUser"
      consumes:
        - "application/json"
        - "application/xml"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "User object that needs to be added to the db"
          required: true
          schema:
            $ref: "#/components/schemas/User"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "User not found"
        "405":
          description: "Validation exception"
      security:
        - userService_auth:
            - "write:users"
            - "read:users"
  /user/findByStatus:
    get:
      tags:
        - "user"
      summary: "Finds Users by status"
      description: "Multiple status values can be provided with comma separated strings"
      operationId: "findUsersByStatus"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
        - name: "status"
          in: "query"
          description: "Status values that need to be considered for filter"
          required: true
          type: "array"
          items:
            type: "string"
            enum:
              - "available"
              - "pending"
              - "sold"
            default: "available"
          collectionFormat: "multi"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/components/schemas/User"
        "400":
          description: "Invalid status value"
      security:
        - userService_auth:
            - "write:users"
            - "read:users"
  /user/findByTags:
    get:
      tags:
        - "user"
      summary: "Finds Users by tags"
      description: "Muliple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing."
      operationId: "findUsersByTags"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
        - name: "tags"
          in: "query"
          description: "Tags to filter by"
          required: true
          type: "array"
          items:
            type: "string"
          collectionFormat: "multi"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/components/schemas/User"
        "400":
          description: "Invalid tag value"
      security:
        - userService_auth:
            - "write:users"
            - "read:users"
      deprecated: true